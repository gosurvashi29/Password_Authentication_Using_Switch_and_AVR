
SWITCHpassword3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000362  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000362  000003d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000418  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000082  00000000  00000000  00000ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000b66  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000b95  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000065f  00000000  00000000  00000be5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001bc  00000000  00000000  00001244  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002aa  00000000  00000000  00001400  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  000016ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000188  00000000  00000000  00001750  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000253  00000000  00000000  000018d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001b2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e6       	ldi	r30, 0x62	; 98
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 36 01 	call	0x26c	; 0x26c <main>
  7a:	0c 94 af 01 	jmp	0x35e	; 0x35e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_Z8disp_keyv>:
	int disp_key()
	{
		while (1)
		{
			
			if (PINA==0b11111110)
  82:	89 b3       	in	r24, 0x19	; 25
  84:	8e 3f       	cpi	r24, 0xFE	; 254
  86:	41 f4       	brne	.+16     	; 0x98 <_Z8disp_keyv+0x16>
			{
				while (PINA==0XFE);
  88:	89 b3       	in	r24, 0x19	; 25
  8a:	8e 3f       	cpi	r24, 0xFE	; 254
  8c:	e9 f3       	breq	.-6      	; 0x88 <_Z8disp_keyv+0x6>
				
				
				PORTB=0b00000001;//1
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	88 bb       	out	0x18, r24	; 24
				
				return 1;
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	4d c0       	rjmp	.+154    	; 0x132 <_Z8disp_keyv+0xb0>
				
				
			}
			
			else if (PINA==0b11111101)
  98:	89 b3       	in	r24, 0x19	; 25
  9a:	8d 3f       	cpi	r24, 0xFD	; 253
  9c:	41 f4       	brne	.+16     	; 0xae <_Z8disp_keyv+0x2c>
			{
				while (PINA==0XFD);
  9e:	89 b3       	in	r24, 0x19	; 25
  a0:	8d 3f       	cpi	r24, 0xFD	; 253
  a2:	e9 f3       	breq	.-6      	; 0x9e <_Z8disp_keyv+0x1c>
				PORTB=0b00000010;//2
  a4:	82 e0       	ldi	r24, 0x02	; 2
  a6:	88 bb       	out	0x18, r24	; 24
		
				return 2;
  a8:	22 e0       	ldi	r18, 0x02	; 2
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	42 c0       	rjmp	.+132    	; 0x132 <_Z8disp_keyv+0xb0>
			}
			else if (PINA==0b11111011)
  ae:	89 b3       	in	r24, 0x19	; 25
  b0:	8b 3f       	cpi	r24, 0xFB	; 251
  b2:	41 f4       	brne	.+16     	; 0xc4 <_Z8disp_keyv+0x42>
			{
				while (PINA==0XFB);
  b4:	89 b3       	in	r24, 0x19	; 25
  b6:	8b 3f       	cpi	r24, 0xFB	; 251
  b8:	e9 f3       	breq	.-6      	; 0xb4 <_Z8disp_keyv+0x32>
				PORTB=0b00000100;//3
  ba:	84 e0       	ldi	r24, 0x04	; 4
  bc:	88 bb       	out	0x18, r24	; 24
				
				return 3;
  be:	23 e0       	ldi	r18, 0x03	; 3
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	37 c0       	rjmp	.+110    	; 0x132 <_Z8disp_keyv+0xb0>
			}
			else if (PINA==0b11110111)
  c4:	89 b3       	in	r24, 0x19	; 25
  c6:	87 3f       	cpi	r24, 0xF7	; 247
  c8:	41 f4       	brne	.+16     	; 0xda <_Z8disp_keyv+0x58>
			{
				while (PINA==0XF7);
  ca:	89 b3       	in	r24, 0x19	; 25
  cc:	87 3f       	cpi	r24, 0xF7	; 247
  ce:	e9 f3       	breq	.-6      	; 0xca <_Z8disp_keyv+0x48>
				PORTB=0b00001000;//4
  d0:	88 e0       	ldi	r24, 0x08	; 8
  d2:	88 bb       	out	0x18, r24	; 24
				
				return 4;
  d4:	24 e0       	ldi	r18, 0x04	; 4
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	2c c0       	rjmp	.+88     	; 0x132 <_Z8disp_keyv+0xb0>
			}
			else if (PINA==0b11101111)
  da:	89 b3       	in	r24, 0x19	; 25
  dc:	8f 3e       	cpi	r24, 0xEF	; 239
  de:	41 f4       	brne	.+16     	; 0xf0 <_Z8disp_keyv+0x6e>
			{
				while (PINA==0XEF);
  e0:	89 b3       	in	r24, 0x19	; 25
  e2:	8f 3e       	cpi	r24, 0xEF	; 239
  e4:	e9 f3       	breq	.-6      	; 0xe0 <_Z8disp_keyv+0x5e>
				PORTB=0b00010000;//5
  e6:	80 e1       	ldi	r24, 0x10	; 16
  e8:	88 bb       	out	0x18, r24	; 24
			
				return 5;
  ea:	25 e0       	ldi	r18, 0x05	; 5
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	21 c0       	rjmp	.+66     	; 0x132 <_Z8disp_keyv+0xb0>
			}
			else if (PINA==0b11011111)
  f0:	89 b3       	in	r24, 0x19	; 25
  f2:	8f 3d       	cpi	r24, 0xDF	; 223
  f4:	41 f4       	brne	.+16     	; 0x106 <_Z8disp_keyv+0x84>
			{
				while (PINA==0XDF);
  f6:	89 b3       	in	r24, 0x19	; 25
  f8:	8f 3d       	cpi	r24, 0xDF	; 223
  fa:	e9 f3       	breq	.-6      	; 0xf6 <_Z8disp_keyv+0x74>
				PORTB=0b00100000;//6
  fc:	80 e2       	ldi	r24, 0x20	; 32
  fe:	88 bb       	out	0x18, r24	; 24
			
				return 6;
 100:	26 e0       	ldi	r18, 0x06	; 6
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	16 c0       	rjmp	.+44     	; 0x132 <_Z8disp_keyv+0xb0>
			}
			else if (PINA==0b10111111)
 106:	89 b3       	in	r24, 0x19	; 25
 108:	8f 3b       	cpi	r24, 0xBF	; 191
 10a:	41 f4       	brne	.+16     	; 0x11c <_Z8disp_keyv+0x9a>
			{
				while (PINA==0XBF);
 10c:	89 b3       	in	r24, 0x19	; 25
 10e:	8f 3b       	cpi	r24, 0xBF	; 191
 110:	e9 f3       	breq	.-6      	; 0x10c <_Z8disp_keyv+0x8a>
				PORTB=0b01000000;//7
 112:	80 e4       	ldi	r24, 0x40	; 64
 114:	88 bb       	out	0x18, r24	; 24
			
				return 7;
 116:	27 e0       	ldi	r18, 0x07	; 7
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	0b c0       	rjmp	.+22     	; 0x132 <_Z8disp_keyv+0xb0>
			}
			else if (PINA==0b01111111)
 11c:	89 b3       	in	r24, 0x19	; 25
 11e:	8f 37       	cpi	r24, 0x7F	; 127
 120:	09 f0       	breq	.+2      	; 0x124 <_Z8disp_keyv+0xa2>
 122:	af cf       	rjmp	.-162    	; 0x82 <_Z8disp_keyv>
			{
				while (PINA==0X7F);
 124:	89 b3       	in	r24, 0x19	; 25
 126:	8f 37       	cpi	r24, 0x7F	; 127
 128:	e9 f3       	breq	.-6      	; 0x124 <_Z8disp_keyv+0xa2>
				PORTB=0b10000000;//8
 12a:	80 e8       	ldi	r24, 0x80	; 128
 12c:	88 bb       	out	0x18, r24	; 24
			
				return 8;
 12e:	28 e0       	ldi	r18, 0x08	; 8
 130:	30 e0       	ldi	r19, 0x00	; 0
			}
		
			
		}
	}	
 132:	82 2f       	mov	r24, r18
 134:	93 2f       	mov	r25, r19
 136:	08 95       	ret

00000138 <_Z8disp_cmdj>:
	
	void disp_cmd(unsigned int cmd)
	{
		PORTC=((cmd & 0XF0)+0X04);
 138:	9c 01       	movw	r18, r24
 13a:	20 7f       	andi	r18, 0xF0	; 240
 13c:	33 27       	eor	r19, r19
 13e:	2c 5f       	subi	r18, 0xFC	; 252
 140:	25 bb       	out	0x15, r18	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 142:	e9 ef       	ldi	r30, 0xF9	; 249
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	31 97       	sbiw	r30, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <_Z8disp_cmdj+0xe>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <_Z8disp_cmdj+0x14>
 14c:	00 00       	nop
		_delay_ms(1);
		PORTC=PORTC - 0X04;
 14e:	95 b3       	in	r25, 0x15	; 21
 150:	94 50       	subi	r25, 0x04	; 4
 152:	95 bb       	out	0x15, r25	; 21
		PORTC=(((cmd<<4)& 0XF0)+0X04);
 154:	82 95       	swap	r24
 156:	80 7f       	andi	r24, 0xF0	; 240
 158:	8c 5f       	subi	r24, 0xFC	; 252
 15a:	85 bb       	out	0x15, r24	; 21
 15c:	89 ef       	ldi	r24, 0xF9	; 249
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <_Z8disp_cmdj+0x28>
 164:	00 c0       	rjmp	.+0      	; 0x166 <_Z8disp_cmdj+0x2e>
 166:	00 00       	nop
		_delay_ms(1);
		PORTC=PORTC-0X04;
 168:	85 b3       	in	r24, 0x15	; 21
 16a:	84 50       	subi	r24, 0x04	; 4
 16c:	85 bb       	out	0x15, r24	; 21
 16e:	08 95       	ret

00000170 <_Z9disp_datai>:
		
	}
	void disp_data( int cmd)
	{
		PORTC=((cmd  & 0XF0)+0X05);
 170:	9c 01       	movw	r18, r24
 172:	20 7f       	andi	r18, 0xF0	; 240
 174:	33 27       	eor	r19, r19
 176:	2b 5f       	subi	r18, 0xFB	; 251
 178:	25 bb       	out	0x15, r18	; 21
 17a:	e9 ef       	ldi	r30, 0xF9	; 249
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	31 97       	sbiw	r30, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <_Z9disp_datai+0xe>
 182:	00 c0       	rjmp	.+0      	; 0x184 <_Z9disp_datai+0x14>
 184:	00 00       	nop
		_delay_ms(1);
		PORTC=PORTC - 0X04;
 186:	25 b3       	in	r18, 0x15	; 21
 188:	24 50       	subi	r18, 0x04	; 4
 18a:	25 bb       	out	0x15, r18	; 21
		PORTC=(((cmd <<4)& 0XF0)+0X05);
 18c:	82 95       	swap	r24
 18e:	92 95       	swap	r25
 190:	90 7f       	andi	r25, 0xF0	; 240
 192:	98 27       	eor	r25, r24
 194:	80 7f       	andi	r24, 0xF0	; 240
 196:	98 27       	eor	r25, r24
 198:	8b 5f       	subi	r24, 0xFB	; 251
 19a:	85 bb       	out	0x15, r24	; 21
 19c:	89 ef       	ldi	r24, 0xF9	; 249
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <_Z9disp_datai+0x30>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <_Z9disp_datai+0x36>
 1a6:	00 00       	nop
		_delay_ms(1);
		PORTC=PORTC-0X04;
 1a8:	85 b3       	in	r24, 0x15	; 21
 1aa:	84 50       	subi	r24, 0x04	; 4
 1ac:	85 bb       	out	0x15, r24	; 21
 1ae:	08 95       	ret

000001b0 <_Z11disp_stringPc>:
		
	}

	void disp_string( char *str)
	{
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	ec 01       	movw	r28, r24
		int i=0;
		while (str[i]!='\0')
 1b6:	88 81       	ld	r24, Y
 1b8:	88 23       	and	r24, r24
 1ba:	39 f0       	breq	.+14     	; 0x1ca <_Z11disp_stringPc+0x1a>
		_delay_ms(1);
		PORTC=PORTC-0X04;
		
	}

	void disp_string( char *str)
 1bc:	21 96       	adiw	r28, 0x01	; 1
	{
		int i=0;
		while (str[i]!='\0')
		{
			disp_data (str[i]);
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 b8 00 	call	0x170	; 0x170 <_Z9disp_datai>
	}

	void disp_string( char *str)
	{
		int i=0;
		while (str[i]!='\0')
 1c4:	89 91       	ld	r24, Y+
 1c6:	81 11       	cpse	r24, r1
 1c8:	fa cf       	rjmp	.-12     	; 0x1be <_Z11disp_stringPc+0xe>
		{
			disp_data (str[i]);
			i++;
			
		}
	}
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <_Z8disp_numj>:

	void disp_num(unsigned int num)
	{
 1d0:	0f 93       	push	r16
 1d2:	1f 93       	push	r17
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	ec 01       	movw	r28, r24
		int a=0;
		if (num==0)
 1da:	00 97       	sbiw	r24, 0x00	; 0
 1dc:	61 f5       	brne	.+88     	; 0x236 <_Z8disp_numj+0x66>
		{
			disp_data(48);
 1de:	80 e3       	ldi	r24, 0x30	; 48
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 b8 00 	call	0x170	; 0x170 <_Z9disp_datai>
		}
		disp_cmd (0X04);
 1e6:	84 e0       	ldi	r24, 0x04	; 4
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 9c 00 	call	0x138	; 0x138 <_Z8disp_cmdj>
 1ee:	28 c0       	rjmp	.+80     	; 0x240 <_Z8disp_numj+0x70>
		while (num!=0)
		{
			a=num % 10;
 1f0:	9e 01       	movw	r18, r28
 1f2:	ad ec       	ldi	r26, 0xCD	; 205
 1f4:	bc ec       	ldi	r27, 0xCC	; 204
 1f6:	0e 94 a3 01 	call	0x346	; 0x346 <__umulhisi3>
 1fa:	8c 01       	movw	r16, r24
 1fc:	16 95       	lsr	r17
 1fe:	07 95       	ror	r16
 200:	16 95       	lsr	r17
 202:	07 95       	ror	r16
 204:	16 95       	lsr	r17
 206:	07 95       	ror	r16
 208:	98 01       	movw	r18, r16
 20a:	22 0f       	add	r18, r18
 20c:	33 1f       	adc	r19, r19
 20e:	c8 01       	movw	r24, r16
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	82 0f       	add	r24, r18
 21e:	93 1f       	adc	r25, r19
 220:	9e 01       	movw	r18, r28
 222:	28 1b       	sub	r18, r24
 224:	39 0b       	sbc	r19, r25
 226:	c9 01       	movw	r24, r18
			disp_data(a+48);
 228:	c0 96       	adiw	r24, 0x30	; 48
 22a:	0e 94 b8 00 	call	0x170	; 0x170 <_Z9disp_datai>
			num=num/10;
 22e:	e8 01       	movw	r28, r16
		if (num==0)
		{
			disp_data(48);
		}
		disp_cmd (0X04);
		while (num!=0)
 230:	20 97       	sbiw	r28, 0x00	; 0
 232:	f1 f6       	brne	.-68     	; 0x1f0 <_Z8disp_numj+0x20>
 234:	05 c0       	rjmp	.+10     	; 0x240 <_Z8disp_numj+0x70>
		int a=0;
		if (num==0)
		{
			disp_data(48);
		}
		disp_cmd (0X04);
 236:	84 e0       	ldi	r24, 0x04	; 4
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 9c 00 	call	0x138	; 0x138 <_Z8disp_cmdj>
 23e:	d8 cf       	rjmp	.-80     	; 0x1f0 <_Z8disp_numj+0x20>
		{
			a=num % 10;
			disp_data(a+48);
			num=num/10;
		}
	}
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	08 95       	ret

0000024a <_Z8lcd_initv>:
	void lcd_init()
	{
		disp_cmd(0X02);
 24a:	82 e0       	ldi	r24, 0x02	; 2
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 9c 00 	call	0x138	; 0x138 <_Z8disp_cmdj>
		disp_cmd(0X28);
 252:	88 e2       	ldi	r24, 0x28	; 40
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 9c 00 	call	0x138	; 0x138 <_Z8disp_cmdj>
		disp_cmd(0X0C);
 25a:	8c e0       	ldi	r24, 0x0C	; 12
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 9c 00 	call	0x138	; 0x138 <_Z8disp_cmdj>
		disp_cmd(0X06);
 262:	86 e0       	ldi	r24, 0x06	; 6
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 9c 00 	call	0x138	; 0x138 <_Z8disp_cmdj>
 26a:	08 95       	ret

0000026c <main>:
void disp_num(unsigned int num);
void disp_string(  char *str);
int disp_key();
int main(void)
{
	DDRA=0X00;
 26c:	1a ba       	out	0x1a, r1	; 26
	DDRB=0XFF;
 26e:	8f ef       	ldi	r24, 0xFF	; 255
 270:	87 bb       	out	0x17, r24	; 23
	PORTA=0XFF;
 272:	8b bb       	out	0x1b, r24	; 27
	DDRC = 0XFF;
 274:	84 bb       	out	0x14, r24	; 20

	lcd_init();
 276:	0e 94 25 01 	call	0x24a	; 0x24a <_Z8lcd_initv>
	int y=0,k=0;
	disp_cmd(0X80);
 27a:	80 e8       	ldi	r24, 0x80	; 128
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 9c 00 	call	0x138	; 0x138 <_Z8disp_cmdj>
	disp_string("WELCOME");
 282:	80 e6       	ldi	r24, 0x60	; 96
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <_Z11disp_stringPc>
 28a:	87 ea       	ldi	r24, 0xA7	; 167
 28c:	91 e6       	ldi	r25, 0x61	; 97
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <main+0x22>
 292:	00 c0       	rjmp	.+0      	; 0x294 <main+0x28>
 294:	00 00       	nop
	_delay_ms(100);
	disp_cmd(0X01);
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 9c 00 	call	0x138	; 0x138 <_Z8disp_cmdj>
 29e:	83 ef       	ldi	r24, 0xF3	; 243
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <main+0x36>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <main+0x3c>
 2a8:	00 00       	nop
	_delay_ms(2);
	disp_cmd(0X80);
 2aa:	80 e8       	ldi	r24, 0x80	; 128
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 9c 00 	call	0x138	; 0x138 <_Z8disp_cmdj>
	disp_string("Enter the paswrd");
 2b2:	88 e6       	ldi	r24, 0x68	; 104
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <_Z11disp_stringPc>
	DDRB=0XFF;
	PORTA=0XFF;
	DDRC = 0XFF;

	lcd_init();
	int y=0,k=0;
 2ba:	c0 e0       	ldi	r28, 0x00	; 0
 2bc:	d0 e0       	ldi	r29, 0x00	; 0
 2be:	14 c0       	rjmp	.+40     	; 0x2e8 <main+0x7c>
				break;
			}
		
		else
		{
			y=(y * 10+k);
 2c0:	9e 01       	movw	r18, r28
 2c2:	22 0f       	add	r18, r18
 2c4:	33 1f       	adc	r19, r19
 2c6:	cc 0f       	add	r28, r28
 2c8:	dd 1f       	adc	r29, r29
 2ca:	cc 0f       	add	r28, r28
 2cc:	dd 1f       	adc	r29, r29
 2ce:	cc 0f       	add	r28, r28
 2d0:	dd 1f       	adc	r29, r29
 2d2:	c2 0f       	add	r28, r18
 2d4:	d3 1f       	adc	r29, r19
 2d6:	c8 0f       	add	r28, r24
 2d8:	d9 1f       	adc	r29, r25
			disp_cmd(0XC4);
 2da:	84 ec       	ldi	r24, 0xC4	; 196
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 9c 00 	call	0x138	; 0x138 <_Z8disp_cmdj>
			disp_num(y);
 2e2:	ce 01       	movw	r24, r28
 2e4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <_Z8disp_numj>
	while (1)
	{
		
		while(k!=8)
		{
			int k=disp_key();
 2e8:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_keyv>
			if (k==8)
 2ec:	88 30       	cpi	r24, 0x08	; 8
 2ee:	91 05       	cpc	r25, r1
 2f0:	39 f7       	brne	.-50     	; 0x2c0 <main+0x54>
			y=(y * 10+k);
			disp_cmd(0XC4);
			disp_num(y);
		}
		}					
				if (y==1234)
 2f2:	c2 3d       	cpi	r28, 0xD2	; 210
 2f4:	94 e0       	ldi	r25, 0x04	; 4
 2f6:	d9 07       	cpc	r29, r25
 2f8:	99 f4       	brne	.+38     	; 0x320 <main+0xb4>
				{
					disp_cmd(0X01);
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 9c 00 	call	0x138	; 0x138 <_Z8disp_cmdj>
 302:	83 ef       	ldi	r24, 0xF3	; 243
 304:	91 e0       	ldi	r25, 0x01	; 1
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <main+0x9a>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <main+0xa0>
 30c:	00 00       	nop
					_delay_ms(2);
					disp_cmd(0X80);
 30e:	80 e8       	ldi	r24, 0x80	; 128
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 9c 00 	call	0x138	; 0x138 <_Z8disp_cmdj>
					disp_string( "PASSWORD MATCHED");
 316:	89 e7       	ldi	r24, 0x79	; 121
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <_Z11disp_stringPc>
 31e:	e4 cf       	rjmp	.-56     	; 0x2e8 <main+0x7c>
					
					
				}
				else{
					disp_cmd(0X01);
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 9c 00 	call	0x138	; 0x138 <_Z8disp_cmdj>
 328:	83 ef       	ldi	r24, 0xF3	; 243
 32a:	91 e0       	ldi	r25, 0x01	; 1
 32c:	01 97       	sbiw	r24, 0x01	; 1
 32e:	f1 f7       	brne	.-4      	; 0x32c <main+0xc0>
 330:	00 c0       	rjmp	.+0      	; 0x332 <main+0xc6>
 332:	00 00       	nop
					_delay_ms(2);
					disp_cmd(0X80);
 334:	80 e8       	ldi	r24, 0x80	; 128
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 9c 00 	call	0x138	; 0x138 <_Z8disp_cmdj>
					disp_string( "PASSWORD NOT MATCHED");
 33c:	8a e8       	ldi	r24, 0x8A	; 138
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <_Z11disp_stringPc>
 344:	d1 cf       	rjmp	.-94     	; 0x2e8 <main+0x7c>

00000346 <__umulhisi3>:
 346:	a2 9f       	mul	r26, r18
 348:	b0 01       	movw	r22, r0
 34a:	b3 9f       	mul	r27, r19
 34c:	c0 01       	movw	r24, r0
 34e:	a3 9f       	mul	r26, r19
 350:	01 d0       	rcall	.+2      	; 0x354 <__umulhisi3+0xe>
 352:	b2 9f       	mul	r27, r18
 354:	70 0d       	add	r23, r0
 356:	81 1d       	adc	r24, r1
 358:	11 24       	eor	r1, r1
 35a:	91 1d       	adc	r25, r1
 35c:	08 95       	ret

0000035e <_exit>:
 35e:	f8 94       	cli

00000360 <__stop_program>:
 360:	ff cf       	rjmp	.-2      	; 0x360 <__stop_program>
